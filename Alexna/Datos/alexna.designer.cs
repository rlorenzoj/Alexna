#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Alexna.Datos
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Alexna")]
	public partial class alexnaDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definiciones de métodos de extensibilidad
    partial void OnCreated();
    partial void InsertFestivos(Festivos instance);
    partial void UpdateFestivos(Festivos instance);
    partial void DeleteFestivos(Festivos instance);
    #endregion
		
		public alexnaDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["AlexnaConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public alexnaDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public alexnaDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public alexnaDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public alexnaDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Festivos> Festivos
		{
			get
			{
				return this.GetTable<Festivos>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Festivos")]
	public partial class Festivos : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.DateTime _Festivo_Fecha;
		
		private string _Festivo_Descripcion;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFestivo_FechaChanging(System.DateTime value);
    partial void OnFestivo_FechaChanged();
    partial void OnFestivo_DescripcionChanging(string value);
    partial void OnFestivo_DescripcionChanged();
    #endregion
		
		public Festivos()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Festivo_Fecha", DbType="Date NOT NULL", IsPrimaryKey=true)]
		public System.DateTime Festivo_Fecha
		{
			get
			{
				return this._Festivo_Fecha;
			}
			set
			{
				if ((this._Festivo_Fecha != value))
				{
					this.OnFestivo_FechaChanging(value);
					this.SendPropertyChanging();
					this._Festivo_Fecha = value;
					this.SendPropertyChanged("Festivo_Fecha");
					this.OnFestivo_FechaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Festivo_Descripcion", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Festivo_Descripcion
		{
			get
			{
				return this._Festivo_Descripcion;
			}
			set
			{
				if ((this._Festivo_Descripcion != value))
				{
					this.OnFestivo_DescripcionChanging(value);
					this.SendPropertyChanging();
					this._Festivo_Descripcion = value;
					this.SendPropertyChanged("Festivo_Descripcion");
					this.OnFestivo_DescripcionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
